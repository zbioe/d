#!/usr/bin/env bash

# references:
# https://mt-caret.github.io/blog/posts/2020-06-29-optin-state.html
set -euo pipefail

usage() {
    name=$(basename -s .sh $0)
    bold=$(tput bold)
    normal=$(tput sgr0)
    under=$(tput smul)
    cat <<EOF
${bold}NAME${normal}
  $name - setup disk encrypted with Luks and using btrfs as filesystem.
  It will stop in mount points part with default config generated by nixos-generate-config --root /mnt
  After that you need to apply a configuration.

${bold}SYNOPSIS${normal}
  $name [OPTION]... [DISK]...

${bold}DESCRIPTION${normal}
  Setup ${bold}partitions${normal} initial system base for nixos installation.

  It will overwrite all previous partition on chosed disk

  With No ${bold}PASSWORD${normal} it will use the default password: DefaultNotStrongPassword

  With No ${bold}DISK${normal} it will open to user chose one based on found disks.

  With No ${bold}SIZE${normal} setted it will use full disk

  ${bold}-h, -?, --help, --usage${normal}
    display this help and exit

  ${bold}-p, --password${normal} ${under}PASSWORD${normal}
    password as arg

  ${bold}-d, --disk${normal} ${under}DISK${normal}
    disk as arg

  ${bold}-s, --size${normal} ${under}SIZE${normal}
    size in used by disk chosed for installation of nixos, NUMBER[GB,MB,..], eg: 120GB

EOF
    exit 0
}

error() {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    echo -e "${RED}${1}${NC}"
    exit ${2:-1}
}

is_disk() {
    disk=$1
    blkid $disk
}

is_usb() {
    usb=$1
    value="$(udevadm info --query=property --name=$usb --property=ID_BUS --value)"
    [ "$value" == "usb" ]
}

list_disks() {
    all_disks=$(lsblk -d -e7 -o name -n -p)
    declare -a disks
    for disk in $all_disks; do
        ! is_usb $disk && disks+=($disk)
    done

    echo -e "Disks Founded:\n${disks[*]}"
}

chose_disk() {
    read -r -e disk
    is_disk $disk || error "invalid disk: $disk"
    echo -n $disk
}

declare disk="-"
declare password="DefaultNotStrongPassword"
while [[ "$#" -gt 0 ]]; do
    case $1 in
    -h | --help | --usage | -\?) usage ;;
    -d | --disk)
        disk="$2"
        shift
        ;;
    -s | --size)
        size="$2"
        shift
        ;;
    -p | --password)
        password="$2"
        shift
        ;;
    *)
        error "Unknown parameter: $1"
        ;;
    esac
    shift
done

[[ "$disk" == "-" ]] &&
    list_disks &&
    echo -ne "\ndisk: " &&
    set disk $(chose_disk)

sgdisk -Z --clear \
    --new 1::+3M --typecode=1:ef02 --change-name=1:'BIOS' \
    --new 2::+1G --typecode=2:ef00 --change-name=2:'EFI' \
    --new 3::+26G --typecode=3:8200 --change-name=3:'SWAP' \
    --new 4::${size:--0} --typecode=4:8309 --change-name=4:'BTRFS' \
    $disk

mapfile -t parts < <(lsblk -l $disk -p -o NAME -n | grep -v ^$disk$)

mkfs.vfat -n boot ${parts[1]}
mkswap -L swap ${parts[2]}

echo $password | cryptsetup -q luksFormat ${parts[3]} --label luks || error "can't format to luks"
echo $password | cryptsetup luksOpen ${parts[3]} enc || error "can't open luks"

mkfs.btrfs -L btree /dev/mapper/enc

swapon ${parts[2]}

mount -t btrfs /dev/mapper/enc /mnt

btrfs subvolume create /mnt/root
btrfs subvolume create /mnt/home
btrfs subvolume create /mnt/nix
btrfs subvolume create /mnt/persist
btrfs subvolume create /mnt/log

btrfs subvolume snapshot -r /mnt/root /mnt/root-blank

umount /mnt

mount -o subvol=root,compress=zstd,noatime /dev/mapper/enc /mnt

mkdir /mnt/home
mount -o subvol=home,compress=zstd,noatime /dev/mapper/enc /mnt/home

mkdir /mnt/nix
mount -o subvol=nix,compress=zstd,noatime /dev/mapper/enc /mnt/nix

mkdir /mnt/persist
mount -o subvol=persist,compress=zstd,noatime /dev/mapper/enc /mnt/persist

mkdir -p /mnt/var/log
mount -o subvol=log,compress=zstd,noatime /dev/mapper/enc /mnt/var/log

mkdir /mnt/boot
mount ${parts[1]} /mnt/boot

nixos-generate-config --root /mnt
